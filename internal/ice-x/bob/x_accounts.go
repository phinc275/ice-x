// Code generated by BobGen psql v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package bob

import (
	"context"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
)

// XAccount is an object representing the database table.
type XAccount struct {
	Username                  string           `db:"username,pk" json:"username"`
	Password                  null.Val[string] `db:"password" json:"password"`
	Email                     null.Val[string] `db:"email" json:"email"`
	EmailPassword             null.Val[string] `db:"email_password" json:"email_password"`
	CreatedAt                 time.Time        `db:"created_at" json:"created_at"`
	UpdatedAt                 time.Time        `db:"updated_at" json:"updated_at"`
	Cookies                   null.Val[string] `db:"cookies" json:"cookies"`
	AutoEmailConfirmationCode bool             `db:"auto_email_confirmation_code" json:"auto_email_confirmation_code"`
}

// XAccountSlice is an alias for a slice of pointers to XAccount.
// This should almost always be used instead of []*XAccount.
type XAccountSlice []*XAccount

// XAccounts contains methods to work with the x_accounts table
var XAccounts = psql.NewTablex[*XAccount, XAccountSlice, *XAccountSetter]("", "x_accounts")

// XAccountsQuery is a query on the x_accounts table
type XAccountsQuery = *psql.ViewQuery[*XAccount, XAccountSlice]

// XAccountsStmt is a prepared statment on x_accounts
type XAccountsStmt = bob.QueryStmt[*XAccount, XAccountSlice]

// XAccountSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type XAccountSetter struct {
	Username                  omit.Val[string]     `db:"username,pk"`
	Password                  omitnull.Val[string] `db:"password"`
	Email                     omitnull.Val[string] `db:"email"`
	EmailPassword             omitnull.Val[string] `db:"email_password"`
	CreatedAt                 omit.Val[time.Time]  `db:"created_at"`
	UpdatedAt                 omit.Val[time.Time]  `db:"updated_at"`
	Cookies                   omitnull.Val[string] `db:"cookies"`
	AutoEmailConfirmationCode omit.Val[bool]       `db:"auto_email_confirmation_code"`
}

func (s XAccountSetter) SetColumns() []string {
	vals := make([]string, 0, 8)
	if !s.Username.IsUnset() {
		vals = append(vals, "username")
	}

	if !s.Password.IsUnset() {
		vals = append(vals, "password")
	}

	if !s.Email.IsUnset() {
		vals = append(vals, "email")
	}

	if !s.EmailPassword.IsUnset() {
		vals = append(vals, "email_password")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	if !s.Cookies.IsUnset() {
		vals = append(vals, "cookies")
	}

	if !s.AutoEmailConfirmationCode.IsUnset() {
		vals = append(vals, "auto_email_confirmation_code")
	}

	return vals
}

func (s XAccountSetter) Overwrite(t *XAccount) {
	if !s.Username.IsUnset() {
		t.Username, _ = s.Username.Get()
	}
	if !s.Password.IsUnset() {
		t.Password, _ = s.Password.GetNull()
	}
	if !s.Email.IsUnset() {
		t.Email, _ = s.Email.GetNull()
	}
	if !s.EmailPassword.IsUnset() {
		t.EmailPassword, _ = s.EmailPassword.GetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
	if !s.Cookies.IsUnset() {
		t.Cookies, _ = s.Cookies.GetNull()
	}
	if !s.AutoEmailConfirmationCode.IsUnset() {
		t.AutoEmailConfirmationCode, _ = s.AutoEmailConfirmationCode.Get()
	}
}

func (s XAccountSetter) Apply(q *dialect.UpdateQuery) {
	if !s.Username.IsUnset() {
		um.Set("username").ToArg(s.Username).Apply(q)
	}
	if !s.Password.IsUnset() {
		um.Set("password").ToArg(s.Password).Apply(q)
	}
	if !s.Email.IsUnset() {
		um.Set("email").ToArg(s.Email).Apply(q)
	}
	if !s.EmailPassword.IsUnset() {
		um.Set("email_password").ToArg(s.EmailPassword).Apply(q)
	}
	if !s.CreatedAt.IsUnset() {
		um.Set("created_at").ToArg(s.CreatedAt).Apply(q)
	}
	if !s.UpdatedAt.IsUnset() {
		um.Set("updated_at").ToArg(s.UpdatedAt).Apply(q)
	}
	if !s.Cookies.IsUnset() {
		um.Set("cookies").ToArg(s.Cookies).Apply(q)
	}
	if !s.AutoEmailConfirmationCode.IsUnset() {
		um.Set("auto_email_confirmation_code").ToArg(s.AutoEmailConfirmationCode).Apply(q)
	}
}

func (s XAccountSetter) Insert() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 8)
	if s.Username.IsUnset() {
		vals[0] = psql.Raw("DEFAULT")
	} else {
		vals[0] = psql.Arg(s.Username)
	}

	if s.Password.IsUnset() {
		vals[1] = psql.Raw("DEFAULT")
	} else {
		vals[1] = psql.Arg(s.Password)
	}

	if s.Email.IsUnset() {
		vals[2] = psql.Raw("DEFAULT")
	} else {
		vals[2] = psql.Arg(s.Email)
	}

	if s.EmailPassword.IsUnset() {
		vals[3] = psql.Raw("DEFAULT")
	} else {
		vals[3] = psql.Arg(s.EmailPassword)
	}

	if s.CreatedAt.IsUnset() {
		vals[4] = psql.Raw("DEFAULT")
	} else {
		vals[4] = psql.Arg(s.CreatedAt)
	}

	if s.UpdatedAt.IsUnset() {
		vals[5] = psql.Raw("DEFAULT")
	} else {
		vals[5] = psql.Arg(s.UpdatedAt)
	}

	if s.Cookies.IsUnset() {
		vals[6] = psql.Raw("DEFAULT")
	} else {
		vals[6] = psql.Arg(s.Cookies)
	}

	if s.AutoEmailConfirmationCode.IsUnset() {
		vals[7] = psql.Raw("DEFAULT")
	} else {
		vals[7] = psql.Arg(s.AutoEmailConfirmationCode)
	}

	return im.Values(vals...)
}

type xAccountColumnNames struct {
	Username                  string
	Password                  string
	Email                     string
	EmailPassword             string
	CreatedAt                 string
	UpdatedAt                 string
	Cookies                   string
	AutoEmailConfirmationCode string
}

var XAccountColumns = struct {
	Username                  psql.Expression
	Password                  psql.Expression
	Email                     psql.Expression
	EmailPassword             psql.Expression
	CreatedAt                 psql.Expression
	UpdatedAt                 psql.Expression
	Cookies                   psql.Expression
	AutoEmailConfirmationCode psql.Expression
}{
	Username:                  psql.Quote("x_accounts", "username"),
	Password:                  psql.Quote("x_accounts", "password"),
	Email:                     psql.Quote("x_accounts", "email"),
	EmailPassword:             psql.Quote("x_accounts", "email_password"),
	CreatedAt:                 psql.Quote("x_accounts", "created_at"),
	UpdatedAt:                 psql.Quote("x_accounts", "updated_at"),
	Cookies:                   psql.Quote("x_accounts", "cookies"),
	AutoEmailConfirmationCode: psql.Quote("x_accounts", "auto_email_confirmation_code"),
}

type xAccountWhere[Q psql.Filterable] struct {
	Username                  psql.WhereMod[Q, string]
	Password                  psql.WhereNullMod[Q, string]
	Email                     psql.WhereNullMod[Q, string]
	EmailPassword             psql.WhereNullMod[Q, string]
	CreatedAt                 psql.WhereMod[Q, time.Time]
	UpdatedAt                 psql.WhereMod[Q, time.Time]
	Cookies                   psql.WhereNullMod[Q, string]
	AutoEmailConfirmationCode psql.WhereMod[Q, bool]
}

func XAccountWhere[Q psql.Filterable]() xAccountWhere[Q] {
	return xAccountWhere[Q]{
		Username:                  psql.Where[Q, string](XAccountColumns.Username),
		Password:                  psql.WhereNull[Q, string](XAccountColumns.Password),
		Email:                     psql.WhereNull[Q, string](XAccountColumns.Email),
		EmailPassword:             psql.WhereNull[Q, string](XAccountColumns.EmailPassword),
		CreatedAt:                 psql.Where[Q, time.Time](XAccountColumns.CreatedAt),
		UpdatedAt:                 psql.Where[Q, time.Time](XAccountColumns.UpdatedAt),
		Cookies:                   psql.WhereNull[Q, string](XAccountColumns.Cookies),
		AutoEmailConfirmationCode: psql.Where[Q, bool](XAccountColumns.AutoEmailConfirmationCode),
	}
}

// FindXAccount retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindXAccount(ctx context.Context, exec bob.Executor, UsernamePK string, cols ...string) (*XAccount, error) {
	if len(cols) == 0 {
		return XAccounts.Query(
			ctx, exec,
			SelectWhere.XAccounts.Username.EQ(UsernamePK),
		).One()
	}

	return XAccounts.Query(
		ctx, exec,
		SelectWhere.XAccounts.Username.EQ(UsernamePK),
		sm.Columns(XAccounts.Columns().Only(cols...)),
	).One()
}

// XAccountExists checks the presence of a single record by primary key
func XAccountExists(ctx context.Context, exec bob.Executor, UsernamePK string) (bool, error) {
	return XAccounts.Query(
		ctx, exec,
		SelectWhere.XAccounts.Username.EQ(UsernamePK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the XAccount
func (o *XAccount) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.Username)
}

// Update uses an executor to update the XAccount
func (o *XAccount) Update(ctx context.Context, exec bob.Executor, s *XAccountSetter) error {
	return XAccounts.Update(ctx, exec, s, o)
}

// Delete deletes a single XAccount record with an executor
func (o *XAccount) Delete(ctx context.Context, exec bob.Executor) error {
	return XAccounts.Delete(ctx, exec, o)
}

// Reload refreshes the XAccount using the executor
func (o *XAccount) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := XAccounts.Query(
		ctx, exec,
		SelectWhere.XAccounts.Username.EQ(o.Username),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o XAccountSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals XAccountSetter) error {
	return XAccounts.Update(ctx, exec, &vals, o...)
}

func (o XAccountSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return XAccounts.Delete(ctx, exec, o...)
}

func (o XAccountSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	UsernamePK := make([]string, len(o))

	for i, o := range o {
		UsernamePK[i] = o.Username
	}

	mods = append(mods,
		SelectWhere.XAccounts.Username.In(UsernamePK...),
	)

	o2, err := XAccounts.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.Username != old.Username {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}
